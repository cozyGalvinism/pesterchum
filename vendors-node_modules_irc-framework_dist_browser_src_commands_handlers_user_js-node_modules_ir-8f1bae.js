/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkpesterchum"] = self["webpackChunkpesterchum"] || []).push([["vendors-node_modules_irc-framework_dist_browser_src_commands_handlers_user_js-node_modules_ir-8f1bae"],{

/***/ "./node_modules/irc-framework/dist/browser/src/commands/handlers/user.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/irc-framework/dist/browser/src/commands/handlers/user.js ***!
  \*******************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\n__webpack_require__(/*! core-js/modules/es.array.index-of */ \"./node_modules/core-js/modules/es.array.index-of.js\");\n\n__webpack_require__(/*! core-js/modules/es.regexp.exec */ \"./node_modules/core-js/modules/es.regexp.exec.js\");\n\n__webpack_require__(/*! core-js/modules/es.string.match */ \"./node_modules/core-js/modules/es.string.match.js\");\n\n__webpack_require__(/*! core-js/modules/es.string.split */ \"./node_modules/core-js/modules/es.string.split.js\");\n\nvar _ = {\n  each: __webpack_require__(/*! lodash/each */ \"./node_modules/lodash/each.js\")\n};\nvar handlers = {\n  NICK: function NICK(command, handler) {\n    // Check if we have a server-time\n    var time = command.getServerTime();\n    handler.emit('nick', {\n      nick: command.nick,\n      ident: command.ident,\n      hostname: command.hostname,\n      new_nick: command.params[0],\n      time: time,\n      tags: command.tags\n    });\n  },\n  ACCOUNT: function ACCOUNT(command, handler) {\n    // Check if we have a server-time\n    var time = command.getServerTime();\n    var account = command.params[0] === '*' ? false : command.params[0];\n    handler.emit('account', {\n      nick: command.nick,\n      ident: command.ident,\n      hostname: command.hostname,\n      account: account,\n      time: time,\n      tags: command.tags\n    });\n  },\n  // If the chghost CAP is enabled and 'enable_chghost' option is true\n  CHGHOST: function CHGHOST(command, handler) {\n    // Check if we have a server-time\n    var time = command.getServerTime();\n    handler.emit('user updated', {\n      nick: command.nick,\n      ident: command.ident,\n      hostname: command.hostname,\n      new_ident: command.params[0],\n      new_hostname: command.params[1],\n      time: time,\n      tags: command.tags\n    });\n  },\n  SETNAME: function SETNAME(command, handler) {\n    // Check if we have a server-time\n    var time = command.getServerTime();\n    handler.emit('user updated', {\n      nick: command.nick,\n      ident: command.ident,\n      hostname: command.hostname,\n      new_gecos: command.params[0],\n      time: time,\n      tags: command.tags\n    });\n  },\n  AWAY: function AWAY(command, handler) {\n    // Check if we have a server-time\n    var time = command.getServerTime();\n    var message = command.params[command.params.length - 1] || '';\n\n    if (message === '') {\n      // back\n      handler.emit('back', {\n        self: false,\n        nick: command.nick,\n        message: '',\n        time: time,\n        tags: command.tags\n      });\n    } else {\n      handler.emit('away', {\n        self: false,\n        nick: command.nick,\n        message: message,\n        time: time,\n        tags: command.tags\n      });\n    }\n  },\n  RPL_NOWAWAY: function RPL_NOWAWAY(command, handler) {\n    // Check if we have a server-time\n    var time = command.getServerTime();\n    handler.emit('away', {\n      self: true,\n      nick: command.params[0],\n      message: command.params[1] || '',\n      time: time,\n      tags: command.tags\n    });\n  },\n  RPL_UNAWAY: function RPL_UNAWAY(command, handler) {\n    // Check if we have a server-time\n    var time = command.getServerTime();\n    handler.emit('back', {\n      self: true,\n      nick: command.params[0],\n      message: command.params[1] || '',\n      // example: \"<nick> is now back.\"\n      time: time,\n      tags: command.tags\n    });\n  },\n  RPL_ISON: function RPL_ISON(command, handler) {\n    handler.emit('users online', {\n      nicks: (command.params[command.params.length - 1] || '').split(' '),\n      tags: command.tags\n    });\n  },\n  ERR_NICKNAMEINUSE: function ERR_NICKNAMEINUSE(command, handler) {\n    handler.emit('nick in use', {\n      nick: command.params[1],\n      reason: command.params[command.params.length - 1],\n      tags: command.tags\n    });\n  },\n  ERR_ERRONEOUSNICKNAME: function ERR_ERRONEOUSNICKNAME(command, handler) {\n    handler.emit('nick invalid', {\n      nick: command.params[1],\n      reason: command.params[command.params.length - 1],\n      tags: command.tags\n    });\n  },\n  RPL_ENDOFWHOIS: function RPL_ENDOFWHOIS(command, handler) {\n    var cache_key = command.params[1].toLowerCase();\n    var cache = handler.cache('whois.' + cache_key);\n\n    if (!cache.nick) {\n      cache.nick = command.params[1];\n      cache.error = 'not_found';\n    }\n\n    handler.emit('whois', cache);\n    cache.destroy();\n  },\n  RPL_AWAY: function RPL_AWAY(command, handler) {\n    var cache_key = 'whois.' + command.params[1].toLowerCase();\n    var message = command.params[command.params.length - 1] || 'is away'; // RPL_AWAY may come as a response to PRIVMSG, and not be a part of whois\n    // If so, emit away event separately for it\n\n    if (!handler.hasCache(cache_key)) {\n      // Check if we have a server-time\n      var time = command.getServerTime();\n      handler.emit('away', {\n        self: false,\n        nick: command.params[1],\n        message: message,\n        time: time,\n        tags: command.tags\n      });\n      return;\n    }\n\n    var cache = handler.cache(cache_key);\n    cache.away = message;\n  },\n  RPL_WHOISUSER: function RPL_WHOISUSER(command, handler) {\n    var cache_key = command.params[1].toLowerCase();\n    var cache = handler.cache('whois.' + cache_key);\n    cache.nick = command.params[1];\n    cache.ident = command.params[2];\n    cache.hostname = command.params[3];\n    cache.real_name = command.params[5];\n  },\n  RPL_WHOISHELPOP: function RPL_WHOISHELPOP(command, handler) {\n    var cache_key = command.params[1].toLowerCase();\n    var cache = handler.cache('whois.' + cache_key);\n    cache.helpop = command.params[command.params.length - 1];\n  },\n  RPL_WHOISBOT: function RPL_WHOISBOT(command, handler) {\n    var cache_key = command.params[1].toLowerCase();\n    var cache = handler.cache('whois.' + cache_key);\n    cache.bot = command.params[command.params.length - 1];\n  },\n  RPL_WHOISSERVER: function RPL_WHOISSERVER(command, handler) {\n    var cache_key = command.params[1].toLowerCase();\n    var cache = handler.cache('whois.' + cache_key);\n    cache.server = command.params[2];\n    cache.server_info = command.params[command.params.length - 1];\n  },\n  RPL_WHOISOPERATOR: function RPL_WHOISOPERATOR(command, handler) {\n    var cache_key = command.params[1].toLowerCase();\n    var cache = handler.cache('whois.' + cache_key);\n    cache.operator = command.params[command.params.length - 1];\n  },\n  RPL_WHOISCHANNELS: function RPL_WHOISCHANNELS(command, handler) {\n    var cache_key = command.params[1].toLowerCase();\n    var cache = handler.cache('whois.' + cache_key);\n\n    if (cache.channels) {\n      cache.channels += ' ' + command.params[command.params.length - 1];\n    } else {\n      cache.channels = command.params[command.params.length - 1];\n    }\n  },\n  RPL_WHOISMODES: function RPL_WHOISMODES(command, handler) {\n    var cache_key = command.params[1].toLowerCase();\n    var cache = handler.cache('whois.' + cache_key);\n    cache.modes = command.params[command.params.length - 1];\n  },\n  RPL_WHOISIDLE: function RPL_WHOISIDLE(command, handler) {\n    var cache_key = command.params[1].toLowerCase();\n    var cache = handler.cache('whois.' + cache_key);\n    cache.idle = command.params[2];\n\n    if (command.params[3]) {\n      cache.logon = command.params[3];\n    }\n  },\n  RPL_WHOISREGNICK: function RPL_WHOISREGNICK(command, handler) {\n    var cache_key = command.params[1].toLowerCase();\n    var cache = handler.cache('whois.' + cache_key);\n    cache.registered_nick = command.params[command.params.length - 1];\n  },\n  RPL_WHOISHOST: function RPL_WHOISHOST(command, handler) {\n    var cache_key = command.params[1].toLowerCase();\n    var cache = handler.cache('whois.' + cache_key);\n    var last_param = command.params[command.params.length - 1]; // <source> 378 <target> <nick> :is connecting from <user>@<host> <ip>\n\n    var match = last_param.match(/.*@([^ ]+) ([^ ]+).*$/); // https://regex101.com/r/AQz7RE/2\n\n    if (!match) {\n      return;\n    }\n\n    cache.actual_ip = match[2];\n    cache.actual_hostname = match[1];\n  },\n  RPL_WHOISSECURE: function RPL_WHOISSECURE(command, handler) {\n    var cache_key = command.params[1].toLowerCase();\n    var cache = handler.cache('whois.' + cache_key);\n    cache.secure = true;\n  },\n  RPL_WHOISCERTFP: function RPL_WHOISCERTFP(command, handler) {\n    var cache_key = command.params[1].toLowerCase();\n    var cache = handler.cache('whois.' + cache_key);\n    cache.certfp = command.params[command.params.length - 1];\n  },\n  RPL_WHOISACCOUNT: function RPL_WHOISACCOUNT(command, handler) {\n    var cache_key = command.params[1].toLowerCase();\n    var cache = handler.cache('whois.' + cache_key);\n    cache.account = command.params[2];\n  },\n  RPL_WHOISSPECIAL: function RPL_WHOISSPECIAL(command, handler) {\n    var cache_key = command.params[1].toLowerCase();\n    var cache = handler.cache('whois.' + cache_key);\n    cache.special = cache.special || [];\n    cache.special.push(command.params[command.params.length - 1]);\n  },\n  RPL_WHOISCOUNTRY: function RPL_WHOISCOUNTRY(command, handler) {\n    var cache_key = command.params[1].toLowerCase();\n    var cache = handler.cache('whois.' + cache_key);\n    cache.country = command.params[command.params.length - 1];\n  },\n  RPL_WHOISACTUALLY: function RPL_WHOISACTUALLY(command, handler) {\n    var cache_key = command.params[1].toLowerCase();\n    var cache = handler.cache('whois.' + cache_key); // <source> 338 <target> <nick> <user>@<host> <ip> :Actual user@host, Actual IP\n\n    var user_host = command.params[command.params.length - 3] || '';\n    var host = user_host.substring(user_host.indexOf('@') + 1);\n    var ip = command.params[command.params.length - 2]; // UnrealIRCd uses this numeric for something else resulting in ip+host\n    // to be empty, so ignore this is that's the case\n\n    if (ip && host) {\n      cache.actual_ip = ip;\n      cache.actual_hostname = host;\n    }\n  },\n  RPL_WHOWASUSER: function RPL_WHOWASUSER(command, handler) {\n    var cache_key = command.params[1].toLowerCase();\n    var cache = handler.cache('whois.' + cache_key);\n    cache.nick = command.params[1];\n    cache.ident = command.params[2];\n    cache.hostname = command.params[3];\n    cache.real_name = command.params[command.params.length - 1];\n  },\n  RPL_ENDOFWHOWAS: function RPL_ENDOFWHOWAS(command, handler) {\n    // Because the WHOIS and WHOWAS numerics clash with eachother,\n    // a cache key will have more than what is just in RPL_WHOWASUSER.\n    // This is why we borrow from the whois.* cache key ID.\n    //\n    // This exposes some fields (that may or may not be set).\n    // Valid keys that should always be set: nick, ident, hostname, real_name\n    // Valid optional keys: actual_ip, actual_hostname, account, server,\n    //   server_info\n    // More optional fields MAY exist, depending on the type of ircd.\n    var cache_key = command.params[1].toLowerCase();\n    var cache = handler.cache('whois.' + cache_key); // Should, in theory, never happen.\n\n    if (!cache.nick) {\n      cache.nick = command.params[1];\n      cache.error = 'no_such_nick';\n    }\n\n    handler.emit('whowas', cache);\n    cache.destroy();\n  },\n  ERR_WASNOSUCHNICK: function ERR_WASNOSUCHNICK(command, handler) {\n    var cache_key = command.params[1].toLowerCase();\n    var cache = handler.cache('whois.' + cache_key);\n    cache.nick = command.params[1];\n    cache.error = 'no_such_nick';\n  },\n  RPL_UMODEIS: function RPL_UMODEIS(command, handler) {// handler.connection.umodes = the modes\n    // TODO: this\n  },\n  RPL_HOSTCLOAKING: function RPL_HOSTCLOAKING(command, handler) {\n    handler.emit('displayed host', {\n      nick: command.params[0],\n      hostname: command.params[1],\n      tags: command.tags\n    });\n  }\n};\n\nmodule.exports = function AddCommandHandlers(command_controller) {\n  _.each(handlers, function (handler, handler_command) {\n    command_controller.addHandler(handler_command, handler);\n  });\n};\n\n//# sourceURL=webpack://pesterchum/./node_modules/irc-framework/dist/browser/src/commands/handlers/user.js?");

/***/ }),

/***/ "./node_modules/irc-framework/dist/browser/src/commands/index.js":
/*!***********************************************************************!*\
  !*** ./node_modules/irc-framework/dist/browser/src/commands/index.js ***!
  \***********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nmodule.exports.Command = __webpack_require__(/*! ./command */ \"./node_modules/irc-framework/dist/browser/src/commands/command.js\");\nmodule.exports.CommandHandler = __webpack_require__(/*! ./handler */ \"./node_modules/irc-framework/dist/browser/src/commands/handler.js\");\n\n//# sourceURL=webpack://pesterchum/./node_modules/irc-framework/dist/browser/src/commands/index.js?");

/***/ }),

/***/ "./node_modules/irc-framework/dist/browser/src/commands/numerics.js":
/*!**************************************************************************!*\
  !*** ./node_modules/irc-framework/dist/browser/src/commands/numerics.js ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
eval("\n/* eslint-disable quote-props */\n\nmodule.exports = {\n  '001': 'RPL_WELCOME',\n  '002': 'RPL_YOURHOST',\n  '003': 'RPL_CREATED',\n  '004': 'RPL_MYINFO',\n  '005': 'RPL_ISUPPORT',\n  '006': 'RPL_MAPMORE',\n  '007': 'RPL_MAPEND',\n  '008': 'RPL_SNOMASK',\n  '015': 'RPL_MAP',\n  '017': 'RPL_MAPEND',\n  '200': 'RPL_TRACELINK',\n  '201': 'RPL_TRACECONNECTING',\n  '202': 'RPL_TRACEHANDSHAKE',\n  '203': 'RPL_TRACEUNKNOWN',\n  '204': 'RPL_TRACEOPERATOR',\n  '205': 'RPL_TRACEUSER',\n  '206': 'RPL_TRACESERVER',\n  '207': 'RPL_TRACESERVICE',\n  '208': 'RPL_TRACENEWTYPE',\n  '209': 'RPL_TRACECLASS',\n  '210': 'RPL_TRACERECONNECT',\n  '211': 'RPL_STATSLINKINFO',\n  '212': 'RPL_STATSCOMMANDS',\n  '213': 'RPL_STATSCLINE',\n  '214': 'RPL_STATSNLINE',\n  '215': 'RPL_STATSILINE',\n  '216': 'RPL_STATSKLINE',\n  '217': 'RPL_STATSPLINE',\n  '218': 'RPL_STATSYLINE',\n  '219': 'RPL_ENDOFSTATS',\n  '220': 'RPL_STATSBLINE',\n  '221': 'RPL_UMODEIS',\n  '222': 'RPL_SQLINE_NICK',\n  '223': 'RPL_STATS_E',\n  '224': 'RPL_STATS_D',\n  '229': 'RPL_SPAMFILTER',\n  '231': 'RPL_SERVICEINFO',\n  '232': 'RPL_ENDOFSERVICES',\n  '233': 'RPL_SERVICE',\n  '234': 'RPL_SERVLIST',\n  '235': 'RPL_SERVLISTEND',\n  '241': 'RPL_STATSLLINE',\n  '242': 'RPL_STATSUPTIME',\n  '243': 'RPL_STATSOLINE',\n  '244': 'RPL_STATSHLINE',\n  '245': 'RPL_STATSSLINE',\n  '246': 'RPL_STATSGLINE',\n  '247': 'RPL_STATSXLINE',\n  '248': 'RPL_STATSULINE',\n  '249': 'RPL_STATSDEBUG',\n  '250': 'RPL_STATSCONN',\n  '251': 'RPL_LUSERCLIENT',\n  '252': 'RPL_LUSEROP',\n  '253': 'RPL_LUSERUNKNOWN',\n  '254': 'RPL_LUSERCHANNELS',\n  '255': 'RPL_LUSERME',\n  '256': 'RPL_ADMINME',\n  '257': 'RPL_ADMINLOC1',\n  '258': 'RPL_ADMINLOC2',\n  '259': 'RPL_ADMINEMAIL',\n  '265': 'RPL_LOCALUSERS',\n  '266': 'RPL_GLOBALUSERS',\n  '276': 'RPL_WHOISCERTFP',\n  '290': 'RPL_HELPHDR',\n  '291': 'RPL_HELPOP',\n  '292': 'RPL_HELPTLR',\n  '301': 'RPL_AWAY',\n  '303': 'RPL_ISON',\n  '304': 'RPL_ZIPSTATS',\n  '305': 'RPL_UNAWAY',\n  '306': 'RPL_NOWAWAY',\n  '307': 'RPL_WHOISREGNICK',\n  '310': 'RPL_WHOISHELPOP',\n  '311': 'RPL_WHOISUSER',\n  '312': 'RPL_WHOISSERVER',\n  '313': 'RPL_WHOISOPERATOR',\n  '314': 'RPL_WHOWASUSER',\n  '315': 'RPL_ENDOFWHO',\n  '317': 'RPL_WHOISIDLE',\n  '318': 'RPL_ENDOFWHOIS',\n  '319': 'RPL_WHOISCHANNELS',\n  '320': 'RPL_WHOISSPECIAL',\n  '321': 'RPL_LISTSTART',\n  '322': 'RPL_LIST',\n  '323': 'RPL_LISTEND',\n  '324': 'RPL_CHANNELMODEIS',\n  '328': 'RPL_CHANNEL_URL',\n  '329': 'RPL_CREATIONTIME',\n  '330': 'RPL_WHOISACCOUNT',\n  '331': 'RPL_NOTOPIC',\n  '332': 'RPL_TOPIC',\n  '333': 'RPL_TOPICWHOTIME',\n  '335': 'RPL_WHOISBOT',\n  '338': 'RPL_WHOISACTUALLY',\n  '341': 'RPL_INVITING',\n  '344': 'RPL_WHOISCOUNTRY',\n  '346': 'RPL_INVITELIST',\n  '347': 'RPL_ENDOFINVITELIST',\n  '352': 'RPL_WHOREPLY',\n  '353': 'RPL_NAMEREPLY',\n  '354': 'RPL_WHOSPCRPL',\n  '364': 'RPL_LINKS',\n  '365': 'RPL_ENDOFLINKS',\n  '366': 'RPL_ENDOFNAMES',\n  '367': 'RPL_BANLIST',\n  '368': 'RPL_ENDOFBANLIST',\n  '369': 'RPL_ENDOFWHOWAS',\n  '371': 'RPL_INFO',\n  '372': 'RPL_MOTD',\n  '374': 'RPL_ENDOFINFO',\n  '375': 'RPL_MOTDSTART',\n  '376': 'RPL_ENDOFMOTD',\n  '378': 'RPL_WHOISHOST',\n  '379': 'RPL_WHOISMODES',\n  '381': 'RPL_NOWOPER',\n  '396': 'RPL_HOSTCLOAKING',\n  '401': 'ERR_NOSUCHNICK',\n  '402': 'ERR_NOSUCHSERVER',\n  '404': 'ERR_CANNOTSENDTOCHAN',\n  '405': 'ERR_TOOMANYCHANNELS',\n  '406': 'ERR_WASNOSUCHNICK',\n  '421': 'ERR_UNKNOWNCOMMAND',\n  '422': 'ERR_NOMOTD',\n  '423': 'ERR_NOADMININFO',\n  '432': 'ERR_ERRONEOUSNICKNAME',\n  '433': 'ERR_NICKNAMEINUSE',\n  '441': 'ERR_USERNOTINCHANNEL',\n  '442': 'ERR_NOTONCHANNEL',\n  '443': 'ERR_USERONCHANNEL',\n  '451': 'ERR_NOTREGISTERED',\n  '461': 'ERR_NOTENOUGHPARAMS',\n  '464': 'ERR_PASSWDMISMATCH',\n  '470': 'ERR_LINKCHANNEL',\n  '471': 'ERR_CHANNELISFULL',\n  '472': 'ERR_UNKNOWNMODE',\n  '473': 'ERR_INVITEONLYCHAN',\n  '474': 'ERR_BANNEDFROMCHAN',\n  '475': 'ERR_BADCHANNELKEY',\n  '481': 'ERR_NOPRIVILEGES',\n  '482': 'ERR_CHANOPRIVSNEEDED',\n  '483': 'ERR_CANTKILLSERVER',\n  '484': 'ERR_ISCHANSERVICE',\n  '485': 'ERR_ISREALSERVICE',\n  '491': 'ERR_NOOPERHOST',\n  '670': 'RPL_STARTTLS',\n  '671': 'RPL_WHOISSECURE',\n  '704': 'RPL_HELPSTART',\n  '705': 'RPL_HELPTXT',\n  '706': 'RPL_ENDOFHELP',\n  '900': 'RPL_LOGGEDIN',\n  '901': 'RPL_LOGGEDOUT',\n  '903': 'RPL_SASLLOGGEDIN',\n  '904': 'ERR_SASLNOTAUTHORISED',\n  '906': 'ERR_SASLABORTED',\n  '907': 'ERR_SASLALREADYAUTHED',\n  '972': 'ERR_CANNOTDOCOMMAND',\n  'WALLOPS': 'RPL_WALLOPS'\n};\n\n//# sourceURL=webpack://pesterchum/./node_modules/irc-framework/dist/browser/src/commands/numerics.js?");

/***/ }),

/***/ "./node_modules/irc-framework/dist/browser/src/connection.js":
/*!*******************************************************************!*\
  !*** ./node_modules/irc-framework/dist/browser/src/connection.js ***!
  \*******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\n__webpack_require__(/*! core-js/modules/es.symbol */ \"./node_modules/core-js/modules/es.symbol.js\");\n\n__webpack_require__(/*! core-js/modules/es.symbol.description */ \"./node_modules/core-js/modules/es.symbol.description.js\");\n\n__webpack_require__(/*! core-js/modules/es.symbol.iterator */ \"./node_modules/core-js/modules/es.symbol.iterator.js\");\n\n__webpack_require__(/*! core-js/modules/es.array.for-each */ \"./node_modules/core-js/modules/es.array.for-each.js\");\n\n__webpack_require__(/*! core-js/modules/es.array.iterator */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n\n__webpack_require__(/*! core-js/modules/es.array.slice */ \"./node_modules/core-js/modules/es.array.slice.js\");\n\n__webpack_require__(/*! core-js/modules/es.date.now */ \"./node_modules/core-js/modules/es.date.now.js\");\n\n__webpack_require__(/*! core-js/modules/es.date.to-string */ \"./node_modules/core-js/modules/es.date.to-string.js\");\n\n__webpack_require__(/*! core-js/modules/es.object.create */ \"./node_modules/core-js/modules/es.object.create.js\");\n\n__webpack_require__(/*! core-js/modules/es.object.define-property */ \"./node_modules/core-js/modules/es.object.define-property.js\");\n\n__webpack_require__(/*! core-js/modules/es.object.get-prototype-of */ \"./node_modules/core-js/modules/es.object.get-prototype-of.js\");\n\n__webpack_require__(/*! core-js/modules/es.object.set-prototype-of */ \"./node_modules/core-js/modules/es.object.set-prototype-of.js\");\n\n__webpack_require__(/*! core-js/modules/es.object.to-string */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n\n__webpack_require__(/*! core-js/modules/es.reflect.construct */ \"./node_modules/core-js/modules/es.reflect.construct.js\");\n\n__webpack_require__(/*! core-js/modules/es.regexp.to-string */ \"./node_modules/core-js/modules/es.regexp.to-string.js\");\n\n__webpack_require__(/*! core-js/modules/es.string.iterator */ \"./node_modules/core-js/modules/es.string.iterator.js\");\n\n__webpack_require__(/*! core-js/modules/web.dom-collections.for-each */ \"./node_modules/core-js/modules/web.dom-collections.for-each.js\");\n\n__webpack_require__(/*! core-js/modules/web.dom-collections.iterator */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\n\n__webpack_require__(/*! core-js/modules/web.timers */ \"./node_modules/core-js/modules/web.timers.js\");\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nvar _ = {\n  pull: __webpack_require__(/*! lodash/pull */ \"./node_modules/lodash/pull.js\")\n};\n\nvar EventEmitter = __webpack_require__(/*! eventemitter3 */ \"./node_modules/eventemitter3/index.js\");\n\nvar ircLineParser = __webpack_require__(/*! ./irclineparser */ \"./node_modules/irc-framework/dist/browser/src/irclineparser.js\");\n\nmodule.exports = /*#__PURE__*/function (_EventEmitter) {\n  _inherits(Connection, _EventEmitter);\n\n  var _super = _createSuper(Connection);\n\n  function Connection(options) {\n    var _this;\n\n    _classCallCheck(this, Connection);\n\n    _this = _super.call(this);\n    _this.options = options || {};\n    _this.connected = false;\n    _this.requested_disconnect = false;\n    _this.reconnect_attempts = 0; // When an IRC connection was successfully registered.\n\n    _this.registered = false;\n    _this.transport = null;\n    _this._timers = [];\n    return _this;\n  }\n\n  _createClass(Connection, [{\n    key: \"debugOut\",\n    value: function debugOut(out) {\n      this.emit('debug', out);\n    }\n  }, {\n    key: \"registeredSuccessfully\",\n    value: function registeredSuccessfully() {\n      this.registered = Date.now();\n    }\n  }, {\n    key: \"connect\",\n    value: function connect(options) {\n      var that = this;\n\n      if (options) {\n        this.options = options;\n      }\n\n      options = this.options;\n      this.auto_reconnect = options.auto_reconnect || false;\n      this.auto_reconnect_max_retries = options.auto_reconnect_max_retries || 3;\n      this.auto_reconnect_max_wait = options.auto_reconnect_max_wait || 300000;\n\n      if (this.transport) {\n        this.clearTimers();\n        this.transport.removeAllListeners();\n        this.transport.disposeSocket();\n      }\n\n      this.transport = new options.transport(options);\n\n      if (!options.encoding || !this.setEncoding(options.encoding)) {\n        this.setEncoding('utf8');\n      }\n\n      bindTransportEvents(this.transport);\n      this.registered = false;\n      this.requested_disconnect = false;\n      this.emit('connecting');\n      this.transport.connect();\n\n      function bindTransportEvents(transport) {\n        transport.on('open', socketOpen);\n        transport.on('line', socketLine);\n        transport.on('close', socketClose);\n        transport.on('debug', transportDebug);\n        transport.on('extra', transportExtra);\n      }\n\n      function transportDebug(out) {\n        that.debugOut(out);\n      }\n\n      function transportExtra() {\n        // Some transports may emit extra events\n        that.emit.apply(that, arguments);\n      } // Called when the socket is connected and ready to start sending/receiving data.\n\n\n      function socketOpen() {\n        that.debugOut('Socket fully connected');\n        that.reconnect_attempts = 0;\n        that.connected = true;\n        that.emit('socket connected');\n      }\n\n      function socketLine(line) {\n        that.addReadBuffer(line);\n      }\n\n      function socketClose(err) {\n        var was_connected = that.connected;\n        var should_reconnect = false;\n        var safely_registered = false;\n        var registered_ms_ago = Date.now() - that.registered; // Some networks use aKills which kill a user after succesfully\n        // registering instead of a ban, so we must wait some time after\n        // being registered to be sure that we are connected properly.\n\n        safely_registered = that.registered !== false && registered_ms_ago > 5000;\n        that.debugOut('Socket closed. was_connected=' + was_connected + ' safely_registered=' + safely_registered + ' requested_disconnect=' + that.requested_disconnect);\n        that.connected = false;\n        that.clearTimers();\n        that.emit('socket close', err);\n\n        if (that.requested_disconnect || !that.auto_reconnect) {\n          should_reconnect = false; // If trying to reconnect, continue with it\n        } else if (that.reconnect_attempts && that.reconnect_attempts < that.auto_reconnect_max_retries) {\n          should_reconnect = true; // If we were originally connected OK, reconnect\n        } else if (was_connected && safely_registered) {\n          should_reconnect = true;\n        } else {\n          should_reconnect = false;\n        }\n\n        if (should_reconnect) {\n          var reconnect_wait = that.calculateExponentialBackoff();\n          that.reconnect_attempts++;\n          that.emit('reconnecting', {\n            attempt: that.reconnect_attempts,\n            max_retries: that.auto_reconnect_max_retries,\n            wait: reconnect_wait\n          });\n          that.debugOut('Scheduling reconnect. Attempt: ' + that.reconnect_attempts + '/' + that.auto_reconnect_max_retries + ' Wait: ' + reconnect_wait + 'ms');\n          that.setTimeout(function () {\n            return that.connect();\n          }, reconnect_wait);\n        } else {\n          that.transport.removeAllListeners();\n          that.emit('close', !!err);\n          that.reconnect_attempts = 0;\n        }\n      }\n    }\n  }, {\n    key: \"calculateExponentialBackoff\",\n    value: function calculateExponentialBackoff() {\n      var jitter = 1000 + Math.floor(Math.random() * 5000);\n      var attempts = Math.min(this.reconnect_attempts, 30);\n      var time = 1000 * Math.pow(2, attempts);\n      return Math.min(time, this.auto_reconnect_max_wait) + jitter;\n    }\n  }, {\n    key: \"addReadBuffer\",\n    value: function addReadBuffer(line) {\n      var message = ircLineParser(line);\n      this.emit('raw', {\n        line: line,\n        from_server: true\n      });\n      this.emit('message', message, line);\n    }\n  }, {\n    key: \"write\",\n    value: function write(data, callback) {\n      if (!this.connected || this.requested_disconnect) {\n        this.debugOut('write() called when not connected');\n\n        if (callback) {\n          setTimeout(callback, 0); // fire in next tick\n        }\n\n        return false;\n      }\n\n      this.emit('raw', {\n        line: data,\n        from_server: false\n      });\n      return this.transport.writeLine(data, callback);\n    }\n    /**\n     * Create and keep track of all timers so they can be easily removed\n     */\n\n  }, {\n    key: \"setTimeout\",\n    value: function (_setTimeout) {\n      function setTimeout() {\n        return _setTimeout.apply(this, arguments);\n      }\n\n      setTimeout.toString = function () {\n        return _setTimeout.toString();\n      };\n\n      return setTimeout;\n    }(function ()\n    /* fn, length, argN */\n    {\n      var that = this;\n      var tmr = null;\n      var args = Array.prototype.slice.call(arguments, 0);\n      var callback = args[0];\n\n      args[0] = function () {\n        _.pull(that._timers, tmr);\n\n        callback.apply(null, args);\n      };\n\n      tmr = setTimeout.apply(null, args);\n\n      this._timers.push(tmr);\n\n      return tmr;\n    })\n  }, {\n    key: \"clearTimeout\",\n    value: function (_clearTimeout) {\n      function clearTimeout(_x) {\n        return _clearTimeout.apply(this, arguments);\n      }\n\n      clearTimeout.toString = function () {\n        return _clearTimeout.toString();\n      };\n\n      return clearTimeout;\n    }(function (tmr) {\n      clearTimeout(tmr);\n\n      _.pull(this._timers, tmr);\n    })\n  }, {\n    key: \"clearTimers\",\n    value: function clearTimers() {\n      this._timers.forEach(function (tmr) {\n        clearTimeout(tmr);\n      });\n\n      this._timers = [];\n    }\n    /**\n     * Close the connection to the IRCd after forcing one last line\n     */\n\n  }, {\n    key: \"end\",\n    value: function end(data, had_error) {\n      var that = this;\n      this.debugOut('Connection.end() connected=' + this.connected + ' with data=' + !!data + ' had_error=' + !!had_error);\n\n      if (this.connected && data) {\n        // Once the last bit of data has been sent, then re-run this function to close the socket\n        this.write(data, function () {\n          that.end(null, had_error);\n        });\n        return;\n      } // Shutdowns of the connection may be caused by errors like ping timeouts, which\n      // are not requested by the user so we leave requested_disconnect as false to make sure any\n      // reconnects happen.\n\n\n      if (!had_error) {\n        this.requested_disconnect = true;\n        this.clearTimers();\n      }\n\n      if (this.transport) {\n        this.transport.close(!!had_error);\n      }\n    }\n  }, {\n    key: \"setEncoding\",\n    value: function setEncoding(encoding) {\n      this.debugOut('Connection.setEncoding() encoding=' + encoding);\n\n      if (this.transport) {\n        return this.transport.setEncoding(encoding);\n      }\n    }\n  }]);\n\n  return Connection;\n}(EventEmitter);\n\n//# sourceURL=webpack://pesterchum/./node_modules/irc-framework/dist/browser/src/connection.js?");

/***/ }),

/***/ "./node_modules/irc-framework/dist/browser/src/helpers.js":
/*!****************************************************************!*\
  !*** ./node_modules/irc-framework/dist/browser/src/helpers.js ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\n__webpack_require__(/*! core-js/modules/es.array.index-of */ \"./node_modules/core-js/modules/es.array.index-of.js\");\n\n__webpack_require__(/*! core-js/modules/es.array.slice */ \"./node_modules/core-js/modules/es.array.slice.js\");\n\nvar Helper = {\n  parseMask: parseMask,\n  splitOnce: splitOnce\n};\nmodule.exports = Helper;\n\nfunction parseMask(mask) {\n  var nick = '';\n  var user = '';\n  var host = '';\n  var sep1 = mask.indexOf('!');\n  var sep2 = mask.indexOf('@');\n\n  if (sep1 === -1 && sep2 === -1) {\n    // something\n    if (mask.indexOf('.') > -1) {\n      host = mask;\n    } else {\n      nick = mask;\n    }\n  } else if (sep1 === -1 && sep2 !== -1) {\n    // something@something\n    nick = mask.substring(0, sep2);\n    host = mask.substring(sep2 + 1);\n  } else if (sep1 !== -1 && sep2 === -1) {\n    // something!something\n    nick = mask.substring(0, sep1);\n    user = mask.substring(sep1 + 1);\n  } else {\n    // something!something@something\n    nick = mask.substring(0, sep1);\n    user = mask.substring(sep1 + 1, sep2);\n    host = mask.substring(sep2 + 1);\n  }\n\n  return {\n    nick: nick,\n    user: user,\n    host: host\n  };\n}\n\nfunction splitOnce(input, separator) {\n  if (typeof input !== 'string' || typeof separator !== 'string') {\n    throw new TypeError('input and separator must be strings');\n  }\n\n  var splitPos;\n\n  if (separator === '') {\n    // special handling required for empty string as separator\n    // cannot match '' at start, so start searching after first character\n    splitPos = input.indexOf(separator, 1);\n\n    if (splitPos === input.length) {\n      // cannot match '' at end, so if that's all we found, act like we found nothing\n      splitPos = -1;\n    }\n  } else {\n    // normal non-zero-length separator\n    splitPos = input.indexOf(separator);\n  } // no separator found\n\n\n  if (splitPos < 0) {\n    return [input];\n  } // the normal case: split around first instance of separator\n\n\n  return [input.slice(0, splitPos), input.slice(splitPos + separator.length)];\n}\n\n//# sourceURL=webpack://pesterchum/./node_modules/irc-framework/dist/browser/src/helpers.js?");

/***/ })

}]);